// Prisma Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?

  workspaces          Workspace[]
  ownerGuide          Guide[]        @relation(name: "ownerGuide")
  solvingGuideProblem GuideProblem[]
  feedbacks           Feedback[]
  feedbackLikes       FeedbackLike[]
}

enum WorkspaceStatus {
  STOPPED
  CREATING
  INITIALIZING
  RUNNING
}

model Workspace {
  id          String          @id
  description String
  owner       User            @relation(fields: [ownerId], references: [id])
  ownerId     Int
  status      WorkspaceStatus
  createdAt   DateTime        @default(now())

  workspaceInstance WorkspaceInstance?
}

model WorkspaceInstance {
  id          String          @id @default(uuid())
  workspaceId String          @unique
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  // TODO: Replace with own status types
  status      WorkspaceStatus

  createdAt DateTime @default(now())
}

model Guide {
  id            Int            @id @default(autoincrement())
  owner         User           @relation(name: "ownerGuide", fields: [ownerId], references: [id])
  ownerId       Int
  name          String
  level         Int
  guideProblems GuideProblem[]
  // TODO: 컨테이너 관계 추가
}

model GuideProblem {
  id       Int    @id @default(autoincrement())
  markdown String @db.VarChar(1024)

  Guide   Guide @relation(fields: [guideId], references: [id])
  guideId Int

  isSolved    Boolean
  solvingUser User[]
}

model Feedback {
  id      Int    @id @default(autoincrement())
  content String
  ownerId Int
  owner   User   @relation(fields: [ownerId], references: [id])

  feedbackLikes FeedbackLike[]
}

model FeedbackLike {
  likerId    Int
  liker      User     @relation(fields: [likerId], references: [id])
  feedbackId Int
  feedback   Feedback @relation(fields: [feedbackId], references: [id])

  @@unique([likerId, feedbackId])
}
